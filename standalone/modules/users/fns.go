// NOTE: This file has been automatically generated by github.com/aacfactory/gcg. Dont Edit it.

package users

import (
	"context"
	"fmt"

	"github.com/aacfactory/errors"
	"github.com/aacfactory/fns-example/standalone/modules/users/foo"
	"github.com/aacfactory/fns/service"
	"github.com/aacfactory/fns/service/documents"
	"github.com/aacfactory/fns/service/validators"
)

const (
	_name  = "users"
	_getFn = "get"
)

func Get(ctx context.Context, argument GetArgument) (result *User, err errors.CodeError) {
	endpoint, hasEndpoint := service.GetEndpoint(ctx, _name)
	if !hasEndpoint {
		err = errors.NotFound("endpoint was not found").WithMeta("name", _name)
		return
	}
	fr := endpoint.Request(ctx, _getFn, service.NewArgument(argument))
	handled := User{}
	hasResult, handleErr := fr.Get(ctx, &handled)
	if handleErr != nil {
		err = handleErr
		return
	}
	if hasResult {
		result = &handled
	}
	return
}

func getComponentC(ctx context.Context) (v *c1) {
	c, has := service.GetComponent(ctx, "c")
	if !has {
		panic(fmt.Sprintf("%+v", errors.Warning("users: get c component failed cause not found in context")))
		return
	}
	ok := false
	v, ok = c.(*c1)
	if !ok {
		panic(fmt.Sprintf("%+v", errors.Warning("users: get c component failed cause type is not matched")))
		return
	}
	return
}

func getComponentFoo(ctx context.Context) (v *foo.Foo) {
	c, has := service.GetComponent(ctx, "foo")
	if !has {
		panic(fmt.Sprintf("%+v", errors.Warning("users: get foo component failed cause not found in context")))
		return
	}
	ok := false
	v, ok = c.(*foo.Foo)
	if !ok {
		panic(fmt.Sprintf("%+v", errors.Warning("users: get foo component failed cause type is not matched")))
		return
	}
	return
}

func Service() (svc service.Service) {
	components := []service.Component{fooLoader(), c1Loader()}
	svc = &_service_{
		Abstract: service.NewAbstract(
			_name,
			false,
			components...,
		),
	}
	return
}

type _service_ struct {
	service.Abstract
}

func (svc *_service_) Handle(ctx context.Context, fn string, argument service.Argument) (v interface{}, err errors.CodeError) {
	switch fn {
	case _getFn:
		// argument
		arg := GetArgument{}
		scanErr := argument.As(&arg)
		if scanErr != nil {
			err = errors.BadRequest("users: scan request argument failed").WithCause(scanErr).WithMeta("service", _name).WithMeta("fn", _getFn)
			return
		}
		validateErr := validators.Validate(arg)
		if validateErr != nil {
			err = errors.BadRequest("users: invalid request argument").WithMeta("service", _name).WithMeta("fn", _getFn).WithCause(validateErr)
			return
		}
		// handle
		v, err = get(ctx, arg)
		break
	default:
		err = errors.NotFound("users: fn was not found").WithMeta("service", _name).WithMeta("fn", fn)
		break
	}
	return

}

func (svc *_service_) Document() (doc service.Document) {
	sd := documents.NewService(_name, "用户服务")
	sd.AddFn(
		"get", "获取用户信息", "获取用户信息\n----------\nerrors:\n* user_get_failed", false, false,
		documents.Struct("main/modules/users", "GetArgument", "获取参数", "获取参数").
			AddProperty("id",
				documents.Int().SetTitle("藏品id").SetDescription("藏品id").AsRequired(`validate:"required" message:"id is invalid"`),
			),
		documents.Struct("main/modules/users", "User", "用户", "用户").
			AddProperty("id",
				documents.String().SetTitle("编号").SetDescription("编号"),
			).
			AddProperty("mobile",
				documents.String().SetTitle("手机号").SetDescription("手机号"),
			).
			AddProperty("name",
				documents.String().SetTitle("姓名").SetDescription("姓名"),
			).
			AddProperty("gender",
				documents.String().SetTitle("性别").SetDescription("性别"),
			).
			AddProperty("age",
				documents.Int().SetTitle("年龄").SetDescription("年龄"),
			).
			AddProperty("avatar",
				documents.String().SetTitle("头像图片地址").SetDescription("头像图片地址"),
			),
	)
	doc = sd
	return
}
