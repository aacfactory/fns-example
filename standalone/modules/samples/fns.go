// NOTE: This file has been automatically generated by github.com/aacfactory/gcg. Dont Edit it.

package samples

import (
	"fmt"

	"github.com/aacfactory/configuares"
	"github.com/aacfactory/errors"
	"github.com/aacfactory/fns"
)

const (
	namespace = "samples"
	queryFn   = "query"
)

func Query(ctx fns.Context, param QueryParam) (v []*Sample, err errors.CodeError) {
	proxy, proxyErr := ctx.App().ServiceProxy(ctx, namespace)
	if proxyErr != nil {
		err = errors.Warning(fmt.Sprintf("get %s proxy failed", namespace)).WithCause(proxyErr)
		return
	}
	arg, argErr := fns.NewArgument(param)
	if argErr != nil {
		err = errors.Warning(fmt.Sprintf("get %s proxy failed", namespace)).WithCause(argErr)
		return
	}
	r := proxy.Request(ctx, queryFn, arg)
	x := make([]*Sample, 0, 1)
	err = r.Get(ctx, &x)
	if err == nil {
		v = x
	}
	return
}

func Service() (v fns.Service) {
	v = &service{}
	return
}

type service struct{}

func (s *service) Namespace() (v string) {
	v = namespace
	return
}

func (s *service) Internal() (v bool) {
	v = false
	return
}

func (s *service) Build(_ configuares.Config) (err error) {
	return
}

func (s *service) Handle(ctx fns.Context, fn string, argument fns.Argument) (v interface{}, err errors.CodeError) {
	switch fn {
	case queryFn:
		ctx = fns.WithFn(ctx, queryFn)
		// authorization
		authorization, hasAuthorization := ctx.User().Authorization()
		if !hasAuthorization {
			err = errors.Unauthorized("authorization was not found in head")
			return
		}
		authorizationErr := ctx.App().Authorizations().Decode(ctx, authorization)
		if authorizationErr != nil {
			err = errors.Unauthorized("authorization is invalid").WithCause(authorizationErr)
			return
		}
		// permission
		permissionErr := ctx.App().Permissions().Validate(ctx, namespace, fn)
		if permissionErr != nil {
			err = errors.Forbidden("forbidden").WithCause(permissionErr)
			return
		}
		// param
		param := QueryParam{}
		scanErr := argument.As(&param)
		if scanErr != nil {
			err = errors.BadRequest("parse request body failed").WithCause(scanErr).WithMeta("_key", "parse_body_failed")
			return
		}
		validateErr := ctx.App().Validate(param)
		if validateErr != nil {
			err = validateErr
			return
		}
		// handle
		v, err = query(ctx, param)
	default:
		err = errors.NotFound(fmt.Sprintf("%s/%s was not found", namespace, fn))
	}
	return

}

func (s *service) Document() (doc *fns.ServiceDocument) {
	doc = fns.NewServiceDocument(namespace, "samples service")

	fn0 := fns.NewFnDocument("query", "query", "query", true, false)
	fn0.SetArgument(
		fns.StructObjectDocument("main/modules/samples", "QueryParam", "", "").
			AddProperty("offset",
				fns.IntObjectDocument().AsRequired(`validate:"required" message:"offset is invalid"`),
			).
			AddProperty("limit",
				fns.IntObjectDocument().AsRequired(`validate:"required" message:"limit is invalid"`),
			),
	)
	fn0.SetResult(
		fns.ArrayObjectDocument(
			"", "", "",
			fns.StructObjectDocument("main/modules/samples", "Sample", "fff", "bbb").
				AddProperty("id",
					fns.StringObjectDocument().SetTitle("编号").SetDescription("编号"),
				).
				AddProperty("mobile",
					fns.StringObjectDocument().SetTitle("手机号").SetDescription("手机号"),
				).
				AddProperty("name",
					fns.StringObjectDocument().SetTitle("姓名").SetDescription("姓名"),
				).
				AddProperty("gender",
					fns.StringObjectDocument().SetTitle("性别").SetDescription("性别").AddEnum("M", "F", "N"),
				).
				AddProperty("age",
					fns.IntObjectDocument().SetTitle("年龄").SetDescription("年龄").AddEnum(3),
				).
				AddProperty("avatar",
					fns.StringObjectDocument().SetTitle("头像图片地址").SetDescription("头像图片地址"),
				).
				AddProperty("score",
					fns.Float32ObjectDocument().SetTitle("Score").SetDescription("Score"),
				).
				AddProperty("dob",
					fns.DateObjectDocument().SetTitle("DOB").SetDescription("DOB"),
				).
				AddProperty("createAt",
					fns.DateTimeObjectDocument().SetTitle("CreateAT").SetDescription("CreateAT"),
				).
				AddProperty("Tokens",
					fns.ArrayObjectDocument(
						"", "", "",
						fns.StringObjectDocument(),
					).SetTitle("Tokens").SetDescription("Tokens"),
				).
				AddProperty("users",
					fns.ArrayObjectDocument(
						"", "", "",
						fns.StructObjectDocument("main/modules/users", "User", "用户", "用户").
							AddProperty("id",
								fns.StringObjectDocument().SetTitle("编号").SetDescription("编号"),
							).
							AddProperty("mobile",
								fns.StringObjectDocument().SetTitle("手机号").SetDescription("手机号"),
							).
							AddProperty("name",
								fns.StringObjectDocument().SetTitle("姓名").SetDescription("姓名"),
							).
							AddProperty("gender",
								fns.StringObjectDocument().SetTitle("性别").SetDescription("性别"),
							).
							AddProperty("age",
								fns.IntObjectDocument().SetTitle("年龄").SetDescription("年龄"),
							).
							AddProperty("avatar",
								fns.StringObjectDocument().SetTitle("头像图片地址").SetDescription("头像图片地址"),
							),
					).SetTitle("Users").SetDescription("Users"),
				).
				AddProperty("userMap",
					fns.MapObjectDocument(
						"", "", "",
						fns.StructObjectDocument("main/modules/users", "User", "用户", "用户").
							AddProperty("id",
								fns.StringObjectDocument().SetTitle("编号").SetDescription("编号"),
							).
							AddProperty("mobile",
								fns.StringObjectDocument().SetTitle("手机号").SetDescription("手机号"),
							).
							AddProperty("name",
								fns.StringObjectDocument().SetTitle("姓名").SetDescription("姓名"),
							).
							AddProperty("gender",
								fns.StringObjectDocument().SetTitle("性别").SetDescription("性别"),
							).
							AddProperty("age",
								fns.IntObjectDocument().SetTitle("年龄").SetDescription("年龄"),
							).
							AddProperty("avatar",
								fns.StringObjectDocument().SetTitle("头像图片地址").SetDescription("头像图片地址"),
							),
					).SetTitle("UserMap").SetDescription("UserMap"),
				).
				AddProperty("Raw",
					fns.JsonRawObjectDocument().SetTitle("Raw").SetDescription("Raw"),
				),
		),
	)
	doc.AddFn(fn0)

	return
}

func (s *service) Shutdown() (err error) {
	return
}
