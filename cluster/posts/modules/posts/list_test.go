package posts_test

import (
	"fmt"
	"github.com/aacfactory/avro"
	"github.com/aacfactory/fns-example/cluster/posts/modules/posts"
	"reflect"
	"strconv"
	"strings"
	"testing"
	"time"
)

var (
	sss = `232 8 17 224 8 40 99 108 110 101 55 106 97 115 118 103 115 53 53 56 49 100 57 106 97 103 2 49 54 50 48 50 51 45 49 50 45 48 53 84 48 56 58 52 56 58 49 51 46 48 51 53 48 50 53 90 8 116 101 115 116 8 116 101 115 116 0 0 40 99 108
 110 101 56 110 105 115 118 103 115 49 99 118 53 106 112 105 53 48 2 49 54 50 48 50 51 45 49 50 45 48 53 84 48 56 58 53 48 58 51 56 46 51 48 49 48 54 55 90 8 116 101 115 116 8 116 101 115 116 0 0 40 99 108 110 101 56 117 97 115 
118 103 115 53 55 112 48 106 112 56 115 103 2 49 54 50 48 50 51 45 49 50 45 48 53 84 48 56 58 53 49 58 48 53 46 49 50 50 49 52 51 90 8 116 101 115 116 8 116 101 115 116 0 0 40 99 108 110 101 57 112 97 115 118 103 115 52 99 54 53
 48 49 49 102 103 2 49 54 50 48 50 51 45 49 50 45 48 53 84 48 56 58 53 50 58 53 51 46 50 51 52 51 48 54 90 8 116 101 115 116 8 116 101 115 116 0 0 40 99 108 110 101 100 50 97 115 118 103 115 49 99 112 50 50 114 99 57 103 2 49 40
 48 48 48 49 45 48 49 45 48 49 84 48 48 58 48 48 58 48 48 90 8 116 101 115 116 8 116 101 115 116 0 0 40 99 108 110 101 100 57 97 115 118 103 115 50 104 118 50 104 113 101 100 48 2 49 54 50 48 50 51 45 49 50 45 48 53 84 48 57 58 
48 48 58 50 49 46 56 56 50 48 54 52 90 8 116 101 115 116 8 116 101 115 116 0 0 40 99 108 110 102 118 98 113 115 118 103 115 48 109 48 55 52 48 113 108 48 2 49 54 50 48 50 51 45 49 50 45 48 53 84 49 48 58 52 55 58 49 49 46 55 57 
55 53 49 49 90 8 116 101 115 116 8 116 101 115 116 0 0 40 99 108 110 103 99 111 105 115 118 103 115 51 57 104 54 105 100 101 101 48 2 49 54 50 48 50 51 45 49 50 45 48 53 84 49 49 58 49 53 58 52 54 46 55 53 48 50 48 51 90 8 116 1
01 115 116 8 116 101 115 116 0 0 40 99 108 110 106 115 105 105 115 118 103 115 52 108 104 53 53 106 56 97 103 2 49 54 50 48 50 51 45 49 50 45 48 53 84 49 53 58 49 52 58 49 56 46 53 48 53 53 50 49 90 8 116 101 115 116 8 116 101 115 116 0 0 0`
)

func TestParP(t *testing.T) {
	ss := strings.Split(sss, " ")
	p := make([]byte, 0)
	for _, s := range ss {
		b, _ := strconv.ParseUint(s, 10, 8)
		p = append(p, byte(b))
	}
	t.Log(string(p))
	v := posts.Posts{}
	err := avro.Unmarshal(p, &v)
	if err != nil {
		t.Error(err)
		return
	}
	t.Log(v)
}

func XXX() (v time.Time, err error) {
	return
}

func TestRF(t *testing.T) {
	rt := reflect.TypeOf(XXX)
	fmt.Println(rt.NumOut())
}

var (
	nilType = reflect.TypeOf(NIL{})
)

type NIL struct{}

func NF[R any]() bool {
	return reflect.TypeOf(new(R)) != reflect.TypeOf(new(NIL))
}

func TestNF(t *testing.T) {
	t.Log(NF[NIL]())
	t.Log(NF[string]())
}
