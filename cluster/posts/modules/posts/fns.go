// NOTE: This file has been automatically generated by github.com/aacfactory/gcg. Dont Edit it.

package posts

import (
	"context"
	"github.com/aacfactory/fns-contrib/databases/postgres"

	"github.com/aacfactory/errors"
	"github.com/aacfactory/fns/endpoints/authorizations"
	"github.com/aacfactory/fns/service"
	"github.com/aacfactory/fns/service/documents"
	"github.com/aacfactory/fns/service/validators"
)

const (
	_name     = "posts"
	_createFn = "create"
)

func Create(ctx context.Context, argument CreateArgument) (result *CreateResult, err errors.CodeError) {
	endpoint, hasEndpoint := service.GetEndpoint(ctx, _name)
	if !hasEndpoint {
		err = errors.NotFound("endpoint was not found").WithMeta("name", _name)
		return
	}
	fr := endpoint.Request(ctx, _createFn, service.NewArgument(argument))
	handled := CreateResult{}
	hasResult, handleErr := fr.Get(ctx, &handled)
	if handleErr != nil {
		err = handleErr
		return
	}
	if hasResult {
		result = &handled
	}
	return
}

func Service() (svc service.Service) {
	components := []service.Component{}
	svc = &_service_{
		Abstract: service.NewAbstract(
			_name,
			false,
			components...,
		),
	}
	return
}

type _service_ struct {
	service.Abstract
}

func (svc *_service_) Handle(ctx context.Context, fn string, argument service.Argument) (v interface{}, err errors.CodeError) {
	switch fn {
	case _createFn:
		// verify authorizations
		verifyAuthorizationErr := authorizations.Verify(ctx)
		if verifyAuthorizationErr != nil {
			err = verifyAuthorizationErr.WithMeta("service", _name).WithMeta("fn", _createFn)
			return
		}
		// argument
		arg := CreateArgument{}
		scanErr := argument.As(&arg)
		if scanErr != nil {
			err = errors.BadRequest("posts: scan request argument failed").WithCause(scanErr).WithMeta("service", _name).WithMeta("fn", _createFn)
			return
		}
		validateErr := validators.Validate(arg)
		if validateErr != nil {
			err = errors.BadRequest("posts: invalid request argument").WithMeta("service", _name).WithMeta("fn", _createFn).WithCause(validateErr)
			return
		}
		// sql begin transaction
		beginTransactionErr := postgres.BeginTransaction(ctx)
		if beginTransactionErr != nil {
			err = errors.ServiceError("posts: begin sql transaction failed").WithMeta("service", _name).WithMeta("fn", _createFn).WithCause(beginTransactionErr)
			return
		}
		// handle
		v, err = create(ctx, arg)
		// sql close transaction
		if err == nil {
			commitTransactionErr := postgres.CommitTransaction(ctx)
			if commitTransactionErr != nil {
				err = errors.ServiceError("posts: commit sql transaction failed").WithMeta("service", _name).WithMeta("fn", _createFn).WithCause(commitTransactionErr)
				_ = postgres.RollbackTransaction(ctx)
				return
			}
		}
		break
	default:
		err = errors.NotFound("posts: fn was not found").WithMeta("service", _name).WithMeta("fn", fn)
		break
	}
	return

}

func (svc *_service_) Document() (doc service.Document) {
	sd := documents.NewService(_name, "Post service")
	sd.AddFn(
		"create", "Create post", "Create a post\n----------\nerrors:\n| Name                     | Code    | Description                   |\n|--------------------------|---------|-------------------------------|\n| posts_create_failed      | 500     | create post failed            |", true, false,
		documents.Struct("main/modules/posts", "CreateArgument", "Create post argument", "Create post argument").
			AddProperty("title",
				documents.String().SetTitle("post title").SetDescription("post title").AsRequired(`validate:"required" message:"title is invalid"`),
			).
			AddProperty("content",
				documents.String().SetTitle("post content").SetDescription("post content").AsRequired(`validate:"required" message:"content is invalid"`),
			),
		documents.Struct("main/modules/posts", "CreateResult", "Create post result", "Create post result").
			AddProperty("id",
				documents.String().SetTitle("post id").SetDescription("post id"),
			),
	)
	doc = sd
	return
}
