// NOTE: This file has been automatically generated by github.com/aacfactory/gcg. Dont Edit it.

package posts

import (
	"context"

	"github.com/aacfactory/errors"
	"github.com/aacfactory/fns-contrib/databases/sql"
	"github.com/aacfactory/fns/endpoints/authorizations"
	"github.com/aacfactory/fns/service"
	"github.com/aacfactory/fns/service/documents"
	"github.com/aacfactory/fns/service/validators"
)

const (
	_name            = "posts"
	_createFn        = "create"
	_createCommentFn = "create_comment"
	_likeFn          = "like"
	_listFn          = "list"
)

func Create(ctx context.Context, argument CreateArgument) (result *CreateResult, err errors.CodeError) {
	endpoint, hasEndpoint := service.GetEndpoint(ctx, _name)
	if !hasEndpoint {
		err = errors.NotFound("endpoint was not found").WithMeta("name", _name)
		return
	}
	fr := endpoint.Request(ctx, _createFn, service.NewArgument(argument))
	handled := CreateResult{}
	hasResult, handleErr := fr.Get(ctx, &handled)
	if handleErr != nil {
		err = handleErr
		return
	}
	if hasResult {
		result = &handled
	}
	return
}

func CreateComment(ctx context.Context, argument CreateCommentArgument) (result *CreateCommentResult, err errors.CodeError) {
	endpoint, hasEndpoint := service.GetEndpoint(ctx, _name)
	if !hasEndpoint {
		err = errors.NotFound("endpoint was not found").WithMeta("name", _name)
		return
	}
	fr := endpoint.Request(ctx, _createCommentFn, service.NewArgument(argument))
	handled := CreateCommentResult{}
	hasResult, handleErr := fr.Get(ctx, &handled)
	if handleErr != nil {
		err = handleErr
		return
	}
	if hasResult {
		result = &handled
	}
	return
}

func CreateLike(ctx context.Context, argument CreateLikeArgument) (result *service.Empty, err errors.CodeError) {
	endpoint, hasEndpoint := service.GetEndpoint(ctx, _name)
	if !hasEndpoint {
		err = errors.NotFound("endpoint was not found").WithMeta("name", _name)
		return
	}
	fr := endpoint.Request(ctx, _likeFn, service.NewArgument(argument))
	handled := service.Empty{}
	hasResult, handleErr := fr.Get(ctx, &handled)
	if handleErr != nil {
		err = handleErr
		return
	}
	if hasResult {
		result = &handled
	}
	return
}

func List(ctx context.Context, argument ListArgument) (result []*Post, err errors.CodeError) {
	endpoint, hasEndpoint := service.GetEndpoint(ctx, _name)
	if !hasEndpoint {
		err = errors.NotFound("endpoint was not found").WithMeta("name", _name)
		return
	}
	fr := endpoint.Request(ctx, _listFn, service.NewArgument(argument))
	handled := make([]*Post, 0, 1)
	hasResult, handleErr := fr.Get(ctx, &handled)
	if handleErr != nil {
		err = handleErr
		return
	}
	if hasResult {
		result = handled
	}
	return
}

func Service() (svc service.Service) {
	components := []service.Component{}
	svc = &_service_{
		Abstract: service.NewAbstract(
			_name,
			false,
			components...,
		),
	}
	return
}

type _service_ struct {
	service.Abstract
}

func (svc *_service_) Handle(ctx context.Context, fn string, argument service.Argument) (v interface{}, err errors.CodeError) {
	switch fn {
	case _createFn:
		// verify authorizations
		verifyAuthorizationErr := authorizations.Verify(ctx)
		if verifyAuthorizationErr != nil {
			err = verifyAuthorizationErr.WithMeta("service", _name).WithMeta("fn", _createFn)
			return
		}
		// argument
		arg := CreateArgument{}
		scanErr := argument.As(&arg)
		if scanErr != nil {
			err = errors.BadRequest("posts: scan request argument failed").WithCause(scanErr).WithMeta("service", _name).WithMeta("fn", _createFn)
			return
		}
		validateErr := validators.Validate(arg)
		if validateErr != nil {
			err = errors.BadRequest("posts: invalid request argument").WithMeta("service", _name).WithMeta("fn", _createFn).WithCause(validateErr)
			return
		}
		// sql begin transaction
		beginTransactionErr := sql.BeginTransaction(ctx)
		if beginTransactionErr != nil {
			err = errors.ServiceError("posts: begin sql transaction failed").WithMeta("service", _name).WithMeta("fn", _createFn).WithCause(beginTransactionErr)
			return
		}
		// handle
		v, err = create(ctx, arg)
		// sql close transaction
		if err == nil {
			commitTransactionErr := sql.CommitTransaction(ctx)
			if commitTransactionErr != nil {
				err = errors.ServiceError("posts: commit sql transaction failed").WithMeta("service", _name).WithMeta("fn", _createFn).WithCause(commitTransactionErr)
				_ = sql.RollbackTransaction(ctx)
				return
			}
		}
		break
	case _createCommentFn:
		// verify authorizations
		verifyAuthorizationErr := authorizations.Verify(ctx)
		if verifyAuthorizationErr != nil {
			err = verifyAuthorizationErr.WithMeta("service", _name).WithMeta("fn", _createCommentFn)
			return
		}
		// argument
		arg := CreateCommentArgument{}
		scanErr := argument.As(&arg)
		if scanErr != nil {
			err = errors.BadRequest("posts: scan request argument failed").WithCause(scanErr).WithMeta("service", _name).WithMeta("fn", _createCommentFn)
			return
		}
		validateErr := validators.Validate(arg)
		if validateErr != nil {
			err = errors.BadRequest("posts: invalid request argument").WithMeta("service", _name).WithMeta("fn", _createCommentFn).WithCause(validateErr)
			return
		}
		// sql begin transaction
		beginTransactionErr := sql.BeginTransaction(ctx)
		if beginTransactionErr != nil {
			err = errors.ServiceError("posts: begin sql transaction failed").WithMeta("service", _name).WithMeta("fn", _createCommentFn).WithCause(beginTransactionErr)
			return
		}
		// handle
		v, err = createComment(ctx, arg)
		// sql close transaction
		if err == nil {
			commitTransactionErr := sql.CommitTransaction(ctx)
			if commitTransactionErr != nil {
				err = errors.ServiceError("posts: commit sql transaction failed").WithMeta("service", _name).WithMeta("fn", _createCommentFn).WithCause(commitTransactionErr)
				_ = sql.RollbackTransaction(ctx)
				return
			}
		}
		break
	case _likeFn:
		// verify authorizations
		verifyAuthorizationErr := authorizations.Verify(ctx)
		if verifyAuthorizationErr != nil {
			err = verifyAuthorizationErr.WithMeta("service", _name).WithMeta("fn", _likeFn)
			return
		}
		// argument
		arg := CreateLikeArgument{}
		scanErr := argument.As(&arg)
		if scanErr != nil {
			err = errors.BadRequest("posts: scan request argument failed").WithCause(scanErr).WithMeta("service", _name).WithMeta("fn", _likeFn)
			return
		}
		validateErr := validators.Validate(arg)
		if validateErr != nil {
			err = errors.BadRequest("posts: invalid request argument").WithMeta("service", _name).WithMeta("fn", _likeFn).WithCause(validateErr)
			return
		}
		// sql begin transaction
		beginTransactionErr := sql.BeginTransaction(ctx)
		if beginTransactionErr != nil {
			err = errors.ServiceError("posts: begin sql transaction failed").WithMeta("service", _name).WithMeta("fn", _likeFn).WithCause(beginTransactionErr)
			return
		}
		// handle
		v, err = createLike(ctx, arg)
		// sql close transaction
		if err == nil {
			commitTransactionErr := sql.CommitTransaction(ctx)
			if commitTransactionErr != nil {
				err = errors.ServiceError("posts: commit sql transaction failed").WithMeta("service", _name).WithMeta("fn", _likeFn).WithCause(commitTransactionErr)
				_ = sql.RollbackTransaction(ctx)
				return
			}
		}
		break
	case _listFn:
		// argument
		arg := ListArgument{}
		scanErr := argument.As(&arg)
		if scanErr != nil {
			err = errors.BadRequest("posts: scan request argument failed").WithCause(scanErr).WithMeta("service", _name).WithMeta("fn", _listFn)
			return
		}
		validateErr := validators.Validate(arg)
		if validateErr != nil {
			err = errors.BadRequest("posts: invalid request argument").WithMeta("service", _name).WithMeta("fn", _listFn).WithCause(validateErr)
			return
		}
		// handle
		v, err = list(ctx, arg)
		break
	default:
		err = errors.NotFound("posts: fn was not found").WithMeta("service", _name).WithMeta("fn", fn)
		break
	}
	return

}

func (svc *_service_) Document() (doc service.Document) {
	sd := documents.NewService(_name, "Post service")
	sd.AddFn(
		"create_comment", "Create post comment", "Create a post comment\n----------\nerrors:\n| Name                           | Code    | Description                   |\n|--------------------------------|---------|-------------------------------|\n| posts_create_comment_failed    | 500     | create post comment failed    |", true, false,
		documents.Struct("main/modules/posts", "CreateCommentArgument", "Create post comment argument", "Create post comment argument").
			AddProperty("postId",
				documents.String().SetTitle("post id").SetDescription("post id").AsRequired(`validate:"required" message:"postId is invalid"`),
			).
			AddProperty("content",
				documents.String().SetTitle("content").SetDescription("content").AsRequired(`validate:"required" message:"content is invalid"`),
			),
		documents.Struct("main/modules/posts", "CreateCommentResult", "Create post comment result", "Create post comment result").
			AddProperty("id",
				documents.Int().SetTitle("post comment id").SetDescription("post comment id"),
			),
	)
	sd.AddFn(
		"create", "Create post", "Create a post\n----------\nerrors:\n| Name                     | Code    | Description                   |\n|--------------------------|---------|-------------------------------|\n| posts_create_failed      | 500     | create post failed            |", true, false,
		documents.Struct("main/modules/posts", "CreateArgument", "Create post argument", "Create post argument").
			AddProperty("title",
				documents.String().SetTitle("post title").SetDescription("post title").AsRequired(`validate:"required" message:"title is invalid"`),
			).
			AddProperty("content",
				documents.String().SetTitle("post content").SetDescription("post content").AsRequired(`validate:"required" message:"content is invalid"`),
			),
		documents.Struct("main/modules/posts", "CreateResult", "Create post result", "Create post result").
			AddProperty("id",
				documents.String().SetTitle("post id").SetDescription("post id"),
			),
	)
	sd.AddFn(
		"like", "Create post like", "Create a post like\n----------\nerrors:\n| Name                     | Code    | Description                   |\n|--------------------------|---------|-------------------------------|\n| posts_like_failed        | 500     | create post like failed       |", true, false,
		documents.Struct("main/modules/posts", "CreateLikeArgument", "Create post like argument", "Create post like argument").
			AddProperty("postId",
				documents.String().SetTitle("post id").SetDescription("post id").AsRequired(`validate:"required" message:"postId is invalid"`),
			),
		documents.Struct("github.com/aacfactory/fns/service", "Empty", "", "Empty"),
	)
	sd.AddFn(
		"list", "List", "List posts\n----------\nerrors:\n| Name                     | Code    | Description                   |\n|--------------------------|---------|-------------------------------|\n| posts_list_failed        | 500     | list posts failed             |", false, false,
		documents.Struct("main/modules/posts", "ListArgument", "List posts argument", "List argument").
			AddProperty("offset",
				documents.Int(),
			).
			AddProperty("length",
				documents.Int(),
			),
		documents.Array(
			"", "", "",
			documents.Struct("main/modules/posts", "Post", "post", "post").
				AddProperty("id",
					documents.String().SetTitle("id").SetDescription("id"),
				).
				AddProperty("user",
					documents.Struct("github.com/aacfactory/fns-example/cluster/users/modules/users", "User", "User", "User model").
						AddProperty("id",
							documents.String().SetTitle("Id").SetDescription("Id"),
						).
						AddProperty("createAt",
							documents.DateTime().SetTitle("create time").SetDescription("create time"),
						).
						AddProperty("nickname",
							documents.String().SetTitle("nickname").SetDescription("nickname"),
						).
						AddProperty("mobile",
							documents.String().SetTitle("mobile").SetDescription("mobile"),
						).
						AddProperty("gender",
							documents.String().SetTitle("gender").SetDescription("gender").AddEnum("F(female)", "M(male)", "N(unknown)"),
						).
						AddProperty("birthday",
							documents.Date().SetTitle("birthday").SetDescription("birthday"),
						).
						AddProperty("avatar",
							documents.Struct("main/repository", "Avatar", "Avatar", "Avatar info").
								AddProperty("schema",
									documents.String().SetTitle("http schema").SetDescription("http schema"),
								).
								AddProperty("domain",
									documents.String().SetTitle("domain").SetDescription("domain"),
								).
								AddProperty("path",
									documents.String().SetTitle("uri path").SetDescription("uri path"),
								).
								AddProperty("mimeType",
									documents.String().SetTitle("mime type").SetDescription("mime type"),
								).
								AddProperty("url",
									documents.String().SetTitle("url").SetDescription("full url"),
								).SetTitle("user avatar").SetDescription("user avatar"),
						).SetTitle("author").SetDescription("author"),
				).
				AddProperty("createAt",
					documents.DateTime().SetTitle("create time").SetDescription("create time"),
				).
				AddProperty("title",
					documents.String().SetTitle("title").SetDescription("title"),
				).
				AddProperty("content",
					documents.String().SetTitle("content").SetDescription("content"),
				).
				AddProperty("comments",
					documents.Array(
						"", "", "",
						documents.Struct("main/modules/posts", "Comment", "comment", "comment").
							AddProperty("id",
								documents.Int().SetTitle("id").SetDescription("id"),
							).
							AddProperty("postId",
								documents.String().SetTitle("post id").SetDescription("post id"),
							).
							AddProperty("user",
								documents.Struct("github.com/aacfactory/fns-example/cluster/users/modules/users", "User", "User", "User model").
									AddProperty("id",
										documents.String().SetTitle("Id").SetDescription("Id"),
									).
									AddProperty("createAt",
										documents.DateTime().SetTitle("create time").SetDescription("create time"),
									).
									AddProperty("nickname",
										documents.String().SetTitle("nickname").SetDescription("nickname"),
									).
									AddProperty("mobile",
										documents.String().SetTitle("mobile").SetDescription("mobile"),
									).
									AddProperty("gender",
										documents.String().SetTitle("gender").SetDescription("gender").AddEnum("F(female)", "M(male)", "N(unknown)"),
									).
									AddProperty("birthday",
										documents.Date().SetTitle("birthday").SetDescription("birthday"),
									).
									AddProperty("avatar",
										documents.Struct("main/repository", "Avatar", "Avatar", "Avatar info").
											AddProperty("schema",
												documents.String().SetTitle("http schema").SetDescription("http schema"),
											).
											AddProperty("domain",
												documents.String().SetTitle("domain").SetDescription("domain"),
											).
											AddProperty("path",
												documents.String().SetTitle("uri path").SetDescription("uri path"),
											).
											AddProperty("mimeType",
												documents.String().SetTitle("mime type").SetDescription("mime type"),
											).
											AddProperty("url",
												documents.String().SetTitle("url").SetDescription("full url"),
											).SetTitle("user avatar").SetDescription("user avatar"),
									).SetTitle("author").SetDescription("author"),
							).
							AddProperty("createAt",
								documents.DateTime().SetTitle("create time").SetDescription("create time"),
							).
							AddProperty("content",
								documents.String().SetTitle("content").SetDescription("content"),
							),
					).SetTitle("comments").SetDescription("latest 10 comments"),
				).
				AddProperty("likes",
					documents.Int().SetTitle("likes").SetDescription("likes num"),
				),
		),
	)
	doc = sd
	return
}
